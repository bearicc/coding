<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>web.cpp</title>
<link rel="stylesheet" type="text/css" href="highlight.css">
</head>
<body class="hl">
<pre class="hl"><span class="hl com">/*</span>
<span class="hl com"> * HTTP/HTTPS GET v0.3</span>
<span class="hl com"> * Usage: ./web &lt;host&gt; &lt;path&gt;</span>
<span class="hl com"> *</span>
<span class="hl com"> * v0.1: 06/11/17</span>
<span class="hl com"> *   Initial release</span>
<span class="hl com"> * v0.2: 06/12/17</span>
<span class="hl com"> *   Optimize reading content</span>
<span class="hl com"> * v0.3: 06/12/17</span>
<span class="hl com"> *   Add https support</span>
<span class="hl com"> */</span>

<span class="hl com">/*</span>
<span class="hl com">struct hostent {</span>
<span class="hl com">	char        *h_name;</span>
<span class="hl com">	char        **h_aliases;</span>
<span class="hl com">	int	        h_addrtype;</span>
<span class="hl com">	int	        h_length;</span>
<span class="hl com">	char        **h_addr_list;</span>
<span class="hl com">struct sockaddr_in {                                                                </span>
<span class="hl com">    __uint8_t   sin_len;                                                            </span>
<span class="hl com">    sa_family_t sin_family;                                                         </span>
<span class="hl com">    in_port_t   sin_port;                                                                                                            </span>
<span class="hl com">    struct      in_addr sin_addr;                                                       </span>
<span class="hl com">    char        sin_zero[8];                                                        </span>
<span class="hl com">};</span>
<span class="hl com">struct sockaddr {</span>
<span class="hl com">	__uint8_t	sa_len;</span>
<span class="hl com">	sa_family_t	sa_family;</span>
<span class="hl com">	char		sa_data[14];</span>
<span class="hl com">};</span>
<span class="hl com"> */</span>
<span class="hl ppc">#include &lt;unistd.h&gt;</span>     <span class="hl slc">// close</span>
<span class="hl ppc"></span><span class="hl ppc">#include &lt;sys/socket.h&gt;</span> <span class="hl slc">// socket</span>
<span class="hl ppc"></span><span class="hl ppc">#include &lt;netdb.h&gt;</span>      <span class="hl slc">// hostent, gethostbyname</span>
<span class="hl ppc"></span><span class="hl ppc">#include &lt;arpa/inet.h&gt;</span>  <span class="hl slc">// htons</span>
<span class="hl ppc"></span><span class="hl ppc">#include &lt;cstring&gt;</span>
<span class="hl ppc">#include &lt;iostream&gt;</span>
<span class="hl ppc">#include &lt;fstream&gt;</span>
<span class="hl ppc">#include &lt;string&gt;</span>
<span class="hl ppc">#include &lt;openssl/ssl.h&gt;</span>
<span class="hl kwa">using namespace</span> std<span class="hl opt">;</span>

<span class="hl kwb">struct</span> URL <span class="hl opt">{</span>
    string protocol<span class="hl opt">;</span>
    string host<span class="hl opt">;</span>
    <span class="hl kwb">int</span>    port<span class="hl opt">;</span>
    string path<span class="hl opt">;</span>
<span class="hl opt">};</span>

<span class="hl kwb">void</span> <span class="hl kwd">usage</span><span class="hl opt">();</span>
<span class="hl kwb">void</span> <span class="hl kwd">error</span><span class="hl opt">(</span>string s<span class="hl opt">);</span>
<span class="hl kwb">int</span> <span class="hl kwd">read_more</span><span class="hl opt">(</span><span class="hl kwb">int</span> sockfd<span class="hl opt">,</span> string<span class="hl opt">&amp;</span> response<span class="hl opt">);</span>
<span class="hl kwc">template</span><span class="hl opt">&lt;</span><span class="hl kwc">class</span> T<span class="hl opt">&gt;</span>
<span class="hl kwb">void</span> <span class="hl kwd">get_response</span><span class="hl opt">(</span>T sockfd<span class="hl opt">,</span> string<span class="hl opt">&amp;</span> header<span class="hl opt">,</span> string<span class="hl opt">&amp;</span> body<span class="hl opt">);</span>
URL <span class="hl kwd">parse_url</span><span class="hl opt">(</span>string url<span class="hl opt">);</span>

<span class="hl kwb">int</span> <span class="hl kwd">main</span><span class="hl opt">(</span><span class="hl kwb">int</span> argc<span class="hl opt">,</span> <span class="hl kwb">char</span><span class="hl opt">**</span> argv<span class="hl opt">) {</span>
    hostent<span class="hl opt">*</span> server<span class="hl opt">;</span>
    sockaddr_in serv_addr<span class="hl opt">;</span>
    <span class="hl kwb">int</span> sockfd<span class="hl opt">;</span>
    <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> bytes <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> cur <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> total <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>

    string url <span class="hl opt">=</span> <span class="hl str">&quot;http://google.com&quot;</span><span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>argc <span class="hl opt">&gt;</span> <span class="hl num">1</span><span class="hl opt">) {</span>
        url <span class="hl opt">=</span> argv<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">];</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        <span class="hl kwd">usage</span><span class="hl opt">();</span>
        <span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    URL s_url       <span class="hl opt">=</span> <span class="hl kwd">parse_url</span><span class="hl opt">(</span>url<span class="hl opt">);</span>
    string protocol <span class="hl opt">=</span> s_url<span class="hl opt">.</span>protocol<span class="hl opt">;</span>
    string host     <span class="hl opt">=</span> s_url<span class="hl opt">.</span>host<span class="hl opt">;</span>
    <span class="hl kwb">int</span> port        <span class="hl opt">=</span> s_url<span class="hl opt">.</span>port<span class="hl opt">;</span>
    string path     <span class="hl opt">=</span> s_url<span class="hl opt">.</span>path<span class="hl opt">;</span>

    cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;* Rebuilt URL to &quot;</span> <span class="hl opt">&lt;&lt;</span> protocol <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;://&quot;</span> <span class="hl opt">&lt;&lt;</span> host <span class="hl opt">&lt;&lt;</span> path <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>

    <span class="hl slc">// server addr and socket addr</span>
    server <span class="hl opt">=</span> <span class="hl kwd">gethostbyname</span><span class="hl opt">(</span>host<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">());</span>
    <span class="hl kwa">if</span> <span class="hl opt">(!</span>server<span class="hl opt">) {</span>
        <span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">&quot;resolve host&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    serv_addr<span class="hl opt">.</span>sin_family <span class="hl opt">=</span> AF_INET<span class="hl opt">;</span>
    serv_addr<span class="hl opt">.</span>sin_port   <span class="hl opt">=</span> <span class="hl kwd">htons</span><span class="hl opt">(</span>port<span class="hl opt">);</span>
    <span class="hl kwd">memcpy</span><span class="hl opt">(&amp;</span>serv_addr<span class="hl opt">.</span>sin_addr<span class="hl opt">.</span>s_addr<span class="hl opt">,</span> server<span class="hl opt">-&gt;</span>h_addr<span class="hl opt">,</span> server<span class="hl opt">-&gt;</span>h_length<span class="hl opt">);</span>
    cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;*   Trying &quot;</span> <span class="hl opt">&lt;&lt;</span> <span class="hl kwd">inet_ntoa</span><span class="hl opt">(</span>serv_addr<span class="hl opt">.</span>sin_addr<span class="hl opt">) &lt;&lt;</span> <span class="hl str">&quot;...&quot;</span> <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>

    <span class="hl slc">// socket</span>
    sockfd <span class="hl opt">=</span> <span class="hl kwd">socket</span><span class="hl opt">(</span>AF_INET<span class="hl opt">,</span> SOCK_STREAM<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwd">connect</span><span class="hl opt">(</span>sockfd<span class="hl opt">, (</span>sockaddr<span class="hl opt">*)&amp;</span>serv_addr<span class="hl opt">,</span> <span class="hl kwa">sizeof</span><span class="hl opt">(</span>serv_addr<span class="hl opt">));</span>

    SSL_CTX<span class="hl opt">*</span> ssl_ctx <span class="hl opt">=</span> NULL<span class="hl opt">;</span>
    SSL<span class="hl opt">*</span> conn <span class="hl opt">=</span> NULL<span class="hl opt">;</span>
    <span class="hl slc">// SSL</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>protocol <span class="hl opt">==</span> <span class="hl str">&quot;https&quot;</span><span class="hl opt">) {</span>
        <span class="hl kwd">SSL_load_error_strings</span><span class="hl opt">();</span>
        <span class="hl kwd">SSL_library_init</span><span class="hl opt">();</span>
        ssl_ctx <span class="hl opt">=</span> <span class="hl kwd">SSL_CTX_new</span><span class="hl opt">(</span><span class="hl kwd">SSLv23_client_method</span><span class="hl opt">());</span>
        conn <span class="hl opt">=</span> <span class="hl kwd">SSL_new</span><span class="hl opt">(</span>ssl_ctx<span class="hl opt">);</span>
        <span class="hl kwd">SSL_set_fd</span><span class="hl opt">(</span>conn<span class="hl opt">,</span> sockfd<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">SSL_connect</span><span class="hl opt">(</span>conn<span class="hl opt">) !=</span> <span class="hl num">1</span><span class="hl opt">) {</span>
            <span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">&quot;SSL&quot;</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
    <span class="hl opt">}</span>

	string request<span class="hl opt">;</span>
    request <span class="hl opt">+=</span> <span class="hl str">&quot;GET &quot;</span> <span class="hl opt">+</span> path <span class="hl opt">+</span> <span class="hl str">&quot; HTTP/1.1</span><span class="hl esc">\r\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
    request <span class="hl opt">+=</span> <span class="hl str">&quot;Host: &quot;</span> <span class="hl opt">+</span> host <span class="hl opt">+</span> <span class="hl str">&quot;</span><span class="hl esc">\r\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
    request <span class="hl opt">+=</span> <span class="hl str">&quot;User-Agent: web</span><span class="hl esc">\r\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
    request <span class="hl opt">+=</span> <span class="hl str">&quot;Accept: */*</span><span class="hl esc">\r\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>
    request <span class="hl opt">+=</span> <span class="hl str">&quot;</span><span class="hl esc">\r\n</span><span class="hl str">&quot;</span><span class="hl opt">;</span>

    cur <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    total <span class="hl opt">=</span> request<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">();</span>
    <span class="hl kwa">do</span> <span class="hl opt">{</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>conn<span class="hl opt">) {</span>
            bytes <span class="hl opt">=</span> <span class="hl kwd">SSL_write</span><span class="hl opt">(</span>conn<span class="hl opt">, &amp;</span>request<span class="hl opt">[</span>cur<span class="hl opt">],</span> total<span class="hl opt">);</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            bytes <span class="hl opt">=</span> <span class="hl kwd">write</span><span class="hl opt">(</span>sockfd<span class="hl opt">, &amp;</span>request<span class="hl opt">[</span>cur<span class="hl opt">],</span> total<span class="hl opt">);</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>bytes <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
            <span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">&quot;request&quot;</span><span class="hl opt">);</span>
        <span class="hl opt">}</span>
        cur <span class="hl opt">+=</span> bytes<span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">while</span> <span class="hl opt">(</span>cur <span class="hl opt">&lt;</span> total <span class="hl opt">&amp;&amp;</span> bytes <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">);</span>

    i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> request<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">()) {</span>
        j <span class="hl opt">=</span> request<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">(</span><span class="hl str">&quot;</span><span class="hl esc">\r\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> i<span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>j <span class="hl opt">==</span> request<span class="hl opt">.</span>npos<span class="hl opt">) {</span>
            j <span class="hl opt">=</span> request<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">();</span>
        <span class="hl opt">}</span>
        cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;&gt; &quot;</span> <span class="hl opt">&lt;&lt;</span> request<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span>i<span class="hl opt">,</span> j <span class="hl opt">-</span> i<span class="hl opt">) &lt;&lt;</span> endl<span class="hl opt">;</span>
        i <span class="hl opt">=</span> j <span class="hl opt">+</span> <span class="hl num">2</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    string header<span class="hl opt">,</span> body<span class="hl opt">;</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>conn<span class="hl opt">) {</span>
        get_response<span class="hl opt">&lt;</span>SSL<span class="hl opt">*&gt;(</span>conn<span class="hl opt">,</span> header<span class="hl opt">,</span> body<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        get_response<span class="hl opt">&lt;</span><span class="hl kwb">int</span><span class="hl opt">&gt;(</span>sockfd<span class="hl opt">,</span> header<span class="hl opt">,</span> body<span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>conn<span class="hl opt">) {</span>
        <span class="hl kwd">SSL_shutdown</span><span class="hl opt">(</span>conn<span class="hl opt">);</span>
        <span class="hl kwd">SSL_free</span><span class="hl opt">(</span>conn<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwd">close</span><span class="hl opt">(</span>sockfd<span class="hl opt">);</span>

    <span class="hl com">/*</span>
<span class="hl com">    ofstream f;</span>
<span class="hl com">    f.open(&quot;test.zip&quot;);</span>
<span class="hl com">    f &lt;&lt; body;</span>
<span class="hl com">    f.close();</span>
<span class="hl com">    */</span>

    <span class="hl kwa">return</span> <span class="hl num">0</span><span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">usage</span><span class="hl opt">() {</span>
    <span class="hl kwd">printf</span><span class="hl opt">(</span><span class="hl str">&quot;Usage: http &lt;host&gt; &lt;path&gt;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">);</span>
    <span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">void</span> <span class="hl kwd">error</span><span class="hl opt">(</span>string s<span class="hl opt">) {</span>
    s<span class="hl opt">.</span><span class="hl kwd">insert</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl str">&quot;ERROR: &quot;</span><span class="hl opt">);</span>
    <span class="hl kwd">perror</span><span class="hl opt">(</span>s<span class="hl opt">.</span><span class="hl kwd">c_str</span><span class="hl opt">());</span>
    <span class="hl kwd">exit</span><span class="hl opt">(</span><span class="hl num">1</span><span class="hl opt">);</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">read_more</span><span class="hl opt">(</span><span class="hl kwb">int</span> sockfd<span class="hl opt">,</span> string<span class="hl opt">&amp;</span> response<span class="hl opt">) {</span>
    string <span class="hl kwd">buf</span><span class="hl opt">(</span><span class="hl num">256</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwb">int</span> bytes <span class="hl opt">=</span> <span class="hl kwd">read</span><span class="hl opt">(</span>sockfd<span class="hl opt">, &amp;</span>buf<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> buf<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">());</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>bytes <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        response <span class="hl opt">+=</span> buf<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> bytes<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> bytes<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwb">int</span> <span class="hl kwd">read_more</span><span class="hl opt">(</span>SSL<span class="hl opt">*</span> conn<span class="hl opt">,</span> string<span class="hl opt">&amp;</span> response<span class="hl opt">) {</span>
    string <span class="hl kwd">buf</span><span class="hl opt">(</span><span class="hl num">256</span><span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">);</span>
    <span class="hl kwb">int</span> bytes <span class="hl opt">=</span> <span class="hl kwd">SSL_read</span><span class="hl opt">(</span>conn<span class="hl opt">, &amp;</span>buf<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">],</span> buf<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">());</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>bytes <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        response <span class="hl opt">+=</span> buf<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> bytes<span class="hl opt">);</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> bytes<span class="hl opt">;</span>
<span class="hl opt">}</span>

<span class="hl kwc">template</span><span class="hl opt">&lt;</span><span class="hl kwc">class</span> T<span class="hl opt">&gt;</span>
<span class="hl kwb">void</span> <span class="hl kwd">get_response</span><span class="hl opt">(</span>T conn<span class="hl opt">,</span> string<span class="hl opt">&amp;</span> header<span class="hl opt">,</span> string<span class="hl opt">&amp;</span> body<span class="hl opt">) {</span>
    string response<span class="hl opt">,</span> line<span class="hl opt">,</span> transfer_encoding<span class="hl opt">;</span>
    <span class="hl kwb">int</span> i <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">,</span> j <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> bytes <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">,</span> header_size <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwb">int</span> content_length <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">,</span> chunked_size <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl slc">// 0 reading header, 1 reading chunked size, 2 reading content</span>
    <span class="hl kwb">int</span> reading_state <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    <span class="hl kwa">while</span> <span class="hl opt">(</span><span class="hl kwa">true</span><span class="hl opt">) {</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>reading_state <span class="hl opt">==</span> <span class="hl num">2</span><span class="hl opt">) {</span>
            <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> response<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() &amp;&amp;</span> i <span class="hl opt">-</span> j <span class="hl opt">&lt;</span> chunked_size <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) {</span>
                <span class="hl opt">++</span>i<span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            <span class="hl kwa">while</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> response<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() &amp;&amp; (</span>response<span class="hl opt">[</span>i<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">] !=</span> <span class="hl str">&apos;</span><span class="hl esc">\r</span><span class="hl str">&apos;</span> <span class="hl opt">||</span> response<span class="hl opt">[</span>i<span class="hl opt">] !=</span> <span class="hl str">&apos;</span><span class="hl esc">\n</span><span class="hl str">&apos;</span><span class="hl opt">)) {</span>
                <span class="hl opt">++</span>i<span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&gt;=</span> response<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">()) {</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">read_more</span><span class="hl opt">(</span>conn<span class="hl opt">,</span> response<span class="hl opt">) &lt;=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
                <span class="hl kwa">return</span><span class="hl opt">;</span>
            <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                <span class="hl kwa">continue</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">==</span> j <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">) {</span>
            <span class="hl slc">// end of header</span>
            reading_state <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
            cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;&lt;&quot;</span> <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
            header_size <span class="hl opt">=</span> j <span class="hl opt">=</span> i <span class="hl opt">=</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>content_length <span class="hl opt">&gt;=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
                <span class="hl kwa">while</span> <span class="hl opt">(</span>response<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() &lt;</span> header<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">() +</span> content_length<span class="hl opt">) {</span>
                    <span class="hl kwa">if</span> <span class="hl opt">(</span><span class="hl kwd">read_more</span><span class="hl opt">(</span>conn<span class="hl opt">,</span> response<span class="hl opt">) &lt;=</span> <span class="hl num">0</span><span class="hl opt">) {</span>
                        <span class="hl kwa">return</span><span class="hl opt">;</span>
                    <span class="hl opt">}</span>
                <span class="hl opt">}</span>
                body <span class="hl opt">=</span> response<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span>header_size<span class="hl opt">);</span>
                cout <span class="hl opt">&lt;&lt;</span> body <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
                <span class="hl kwa">break</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
            <span class="hl kwa">continue</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
        line <span class="hl opt">=</span> response<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span>j<span class="hl opt">,</span> i <span class="hl opt">-</span> j <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">);</span>
        <span class="hl kwa">if</span> <span class="hl opt">(</span>reading_state <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
            cout <span class="hl opt">&lt;&lt;</span> <span class="hl str">&quot;&lt; &quot;</span> <span class="hl opt">&lt;&lt;</span> line <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
            header <span class="hl opt">+=</span> line <span class="hl opt">+</span> <span class="hl str">&quot;;&quot;</span><span class="hl opt">;</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>content_length <span class="hl opt">&lt;</span> <span class="hl num">0</span> <span class="hl opt">&amp;&amp;</span> transfer_encoding<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">()) {</span>
                <span class="hl kwb">int</span> pos <span class="hl opt">=</span> line<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">(</span><span class="hl str">&quot;Content-Length&quot;</span><span class="hl opt">);</span>
                <span class="hl kwa">if</span> <span class="hl opt">(</span>pos <span class="hl opt">!=</span> line<span class="hl opt">.</span>npos<span class="hl opt">) {</span>
                    <span class="hl kwa">while</span> <span class="hl opt">(!</span><span class="hl kwd">isdigit</span><span class="hl opt">(</span>line<span class="hl opt">[</span>pos<span class="hl opt">])) {</span>
                        <span class="hl opt">++</span>pos<span class="hl opt">;</span>
                    <span class="hl opt">}</span>
                    content_length <span class="hl opt">=</span> <span class="hl kwd">stoi</span><span class="hl opt">(</span>line<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span>pos<span class="hl opt">));</span>
                <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
                    pos <span class="hl opt">=</span> line<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">(</span><span class="hl str">&quot;Transfer-Encoding&quot;</span><span class="hl opt">);</span>
                    <span class="hl kwa">if</span> <span class="hl opt">(</span>pos <span class="hl opt">!=</span> line<span class="hl opt">.</span>npos<span class="hl opt">) {</span>
                        <span class="hl kwa">while</span> <span class="hl opt">(!</span><span class="hl kwd">isalpha</span><span class="hl opt">(</span>line<span class="hl opt">[</span>pos<span class="hl opt">])) {</span>
                            <span class="hl opt">++</span>pos<span class="hl opt">;</span>
                        <span class="hl opt">}</span>
                        transfer_encoding <span class="hl opt">=</span> line<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span>pos<span class="hl opt">);</span>
                    <span class="hl opt">}</span>
                <span class="hl opt">}</span>
            <span class="hl opt">}</span>
        <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>reading_state <span class="hl opt">==</span> <span class="hl num">1</span><span class="hl opt">) {</span>
            chunked_size <span class="hl opt">=</span> <span class="hl kwd">stoi</span><span class="hl opt">(</span>line<span class="hl opt">,</span> NULL<span class="hl opt">,</span> <span class="hl num">16</span><span class="hl opt">);</span>
            <span class="hl kwa">if</span> <span class="hl opt">(</span>chunked_size <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">) {</span>
                <span class="hl kwa">break</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
            reading_state <span class="hl opt">=</span> <span class="hl num">2</span><span class="hl opt">;</span>
        <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
            body <span class="hl opt">+=</span> line<span class="hl opt">;</span>
            reading_state <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">;</span>
            cout <span class="hl opt">&lt;&lt;</span> line <span class="hl opt">&lt;&lt;</span> endl<span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl slc">// ready for next line</span>
        j <span class="hl opt">=</span> i <span class="hl opt">=</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
<span class="hl opt">}</span>

URL <span class="hl kwd">parse_url</span><span class="hl opt">(</span>string url<span class="hl opt">) {</span>
    URL ret<span class="hl opt">;</span>
    ret<span class="hl opt">.</span>port <span class="hl opt">= -</span><span class="hl num">1</span><span class="hl opt">;</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>url<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">7</span><span class="hl opt">) ==</span> <span class="hl str">&quot;http://&quot;</span><span class="hl opt">) {</span>
        ret<span class="hl opt">.</span>protocol <span class="hl opt">=</span> <span class="hl str">&quot;http&quot;</span><span class="hl opt">;</span>
        url <span class="hl opt">=</span> url<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span><span class="hl num">7</span><span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>url<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">8</span><span class="hl opt">) ==</span> <span class="hl str">&quot;https://&quot;</span><span class="hl opt">) {</span>
        ret<span class="hl opt">.</span>protocol <span class="hl opt">=</span> <span class="hl str">&quot;https&quot;</span><span class="hl opt">;</span>
        url <span class="hl opt">=</span> url<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span><span class="hl num">8</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>
    
    <span class="hl kwb">int</span> pos1 <span class="hl opt">=</span> url<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">(</span><span class="hl str">&quot;:&quot;</span><span class="hl opt">),</span> pos2 <span class="hl opt">=</span> url<span class="hl opt">.</span><span class="hl kwd">find</span><span class="hl opt">(</span><span class="hl str">&quot;/&quot;</span><span class="hl opt">);</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>pos2 <span class="hl opt">==</span> url<span class="hl opt">.</span>npos<span class="hl opt">) {</span>
        pos2 <span class="hl opt">=</span> url<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>pos1 <span class="hl opt">==</span> url<span class="hl opt">.</span>npos<span class="hl opt">) {</span>
        pos1 <span class="hl opt">=</span> url<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">();</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>pos2 <span class="hl opt">-</span> pos1 <span class="hl opt">-</span> <span class="hl num">1</span> <span class="hl opt">&gt;</span> <span class="hl num">0</span><span class="hl opt">){</span>
        ret<span class="hl opt">.</span>port <span class="hl opt">=</span> <span class="hl kwd">stoi</span><span class="hl opt">(</span>url<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span>pos1 <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">,</span> pos2 <span class="hl opt">-</span> pos1 <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">));</span>
    <span class="hl opt">}</span>

    ret<span class="hl opt">.</span>host <span class="hl opt">=</span> url<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl kwd">min</span><span class="hl opt">(</span>pos1<span class="hl opt">,</span> pos2<span class="hl opt">));</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>pos2 <span class="hl opt">&lt;</span> url<span class="hl opt">.</span><span class="hl kwd">size</span><span class="hl opt">()) {</span>
        ret<span class="hl opt">.</span>path <span class="hl opt">=</span> url<span class="hl opt">.</span><span class="hl kwd">substr</span><span class="hl opt">(</span>pos2<span class="hl opt">);</span>
    <span class="hl opt">}</span> <span class="hl kwa">else</span> <span class="hl opt">{</span>
        ret<span class="hl opt">.</span>path <span class="hl opt">=</span> <span class="hl str">&quot;/&quot;</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">((</span>ret<span class="hl opt">.</span>protocol <span class="hl opt">==</span> <span class="hl str">&quot;http&quot;</span> <span class="hl opt">&amp;&amp;</span> ret<span class="hl opt">.</span>port <span class="hl opt">==</span> <span class="hl num">443</span><span class="hl opt">) ||</span>
        <span class="hl opt">(</span>ret<span class="hl opt">.</span>protocol <span class="hl opt">==</span> <span class="hl str">&quot;http&quot;</span> <span class="hl opt">&amp;&amp;</span> ret<span class="hl opt">.</span>port <span class="hl opt">==</span> <span class="hl num">80</span> <span class="hl opt">)) {</span>
        <span class="hl kwd">error</span><span class="hl opt">(</span><span class="hl str">&quot;Invalid URL&quot;</span><span class="hl opt">);</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>ret<span class="hl opt">.</span>protocol <span class="hl opt">==</span> <span class="hl str">&quot;http&quot;</span><span class="hl opt">) {</span>
        ret<span class="hl opt">.</span>port <span class="hl opt">=</span> <span class="hl num">80</span><span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>ret<span class="hl opt">.</span>protocol <span class="hl opt">==</span> <span class="hl str">&quot;https&quot;</span><span class="hl opt">) {</span>
        ret<span class="hl opt">.</span>port <span class="hl opt">=</span> <span class="hl num">443</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>ret<span class="hl opt">.</span>port <span class="hl opt">==</span> <span class="hl num">80</span><span class="hl opt">) {</span>
        ret<span class="hl opt">.</span>protocol <span class="hl opt">=</span> <span class="hl str">&quot;http&quot;</span><span class="hl opt">;</span>
    <span class="hl opt">}</span> <span class="hl kwa">else if</span> <span class="hl opt">(</span>ret<span class="hl opt">.</span>port <span class="hl opt">==</span> <span class="hl num">443</span><span class="hl opt">) {</span>
        ret<span class="hl opt">.</span>protocol <span class="hl opt">=</span> <span class="hl str">&quot;https&quot;</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">if</span> <span class="hl opt">(</span>ret<span class="hl opt">.</span>protocol<span class="hl opt">.</span><span class="hl kwd">empty</span><span class="hl opt">()) {</span>
        ret<span class="hl opt">.</span>protocol <span class="hl opt">=</span> <span class="hl str">&quot;http&quot;</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>ret<span class="hl opt">.</span>port <span class="hl opt">&lt;</span> <span class="hl num">0</span><span class="hl opt">) {</span>
        ret<span class="hl opt">.</span>port <span class="hl opt">=</span> <span class="hl num">80</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">return</span> ret<span class="hl opt">;</span>
<span class="hl opt">}</span>
</pre>
</body>
</html>
<!--HTML generated by highlight 3.38, http://www.andre-simon.de/-->
